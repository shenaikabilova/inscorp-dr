/**
 * 
 */
package inscorp;

import java.util.Date;

import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Test;

import dao_api.KaskoDAO;
import dao_jdbc.KaskoDAOImpl;
import model.Kasko;

/**
 * @author shenaikabilova
 *
 */
public class KaskoDAOImplTest {
	@SuppressWarnings("deprecation")
	private static Kasko kasko = new Kasko("000001", "000014", "Физическо лице", "Иван", "Иванов", "Иванов", 
			"8807070011", "123456", "гр. Варна", 9000, "В4589АА", "Автомобил", "А14789АRD78954123", 
			"Ауди", "А5", "Бял", 2005, new Date(2005, 10, 10), 2.0f, 4, 10000, 500);
	private static KaskoDAO dao = new KaskoDAOImpl();
	
	@AfterClass
	public static void del() {
		dao.deleteKasko(kasko.getInsKaskoId());
	}
	
	@Test
	public void testListAllKasko(){
		Assert.assertFalse(dao.listKasko().isEmpty());
	}

	@Test
	public void insertKasko () {
		dao.insertKasko(kasko);

		Assert.assertEquals(kasko.getInsurerId(), dao.searchKasko("000014").getInsurerId());
		Assert.assertEquals(kasko.getInsKaskoId(), dao.searchKasko("000014").getInsKaskoId());
		Assert.assertEquals(kasko.getInsType(), dao.searchKasko("000014").getInsType());
		Assert.assertEquals(kasko.getInsurenceFirstName(), dao.searchKasko("000014").getInsurenceFirstName());
		Assert.assertEquals(kasko.getInsurenceSecondName(), dao.searchKasko("000014").getInsurenceSecondName());
		Assert.assertEquals(kasko.getInsurenceFamily(), dao.searchKasko("000014").getInsurenceFamily());
		Assert.assertEquals(kasko.getInsurenceEGN(), dao.searchKasko("000014").getInsurenceEGN());
		Assert.assertEquals(kasko.getInsurenceMobilePhone(), dao.searchKasko("000014").getInsurenceMobilePhone());
		Assert.assertEquals(kasko.getInsurenceAddress(), dao.searchKasko("000014").getInsurenceAddress());
		Assert.assertEquals(kasko.getInsurencePK(), dao.searchKasko("000014").getInsurencePK());
		Assert.assertEquals(kasko.getVehicleRegistrationNumber(), dao.searchKasko("000014").getVehicleRegistrationNumber());
		Assert.assertEquals(kasko.getVehicleType(), dao.searchKasko("000014").getVehicleType());
		Assert.assertEquals(kasko.getVehicleRama(), dao.searchKasko("000014").getVehicleRama());
		Assert.assertEquals(kasko.getVehicleBrand(), dao.searchKasko("000014").getVehicleBrand());
		Assert.assertEquals(kasko.getVehicleModel(), dao.searchKasko("000014").getVehicleModel());
		Assert.assertEquals(kasko.getVehicleColor(), dao.searchKasko("000014").getVehicleColor());
		Assert.assertEquals(kasko.getVehicleYear(), dao.searchKasko("000014").getVehicleYear());
		Assert.assertEquals(kasko.getVehicleFirstRegistration(), dao.searchKasko("000014").getVehicleFirstRegistration());
		Assert.assertEquals(kasko.getVehicleEngine(), dao.searchKasko("000014").getVehicleEngine(), 0.001);
		Assert.assertEquals(kasko.getVehiclePlaceNumber(), dao.searchKasko("000014").getVehiclePlaceNumber());
		Assert.assertEquals(kasko.getVehicleInsurenceValue(), dao.searchKasko("000014").getVehicleInsurenceValue(), 0.001);
		Assert.assertEquals(kasko.getVehicleInsurencePremiq(), dao.searchKasko("000014").getVehicleInsurencePremiq(), 0.001);
	}
	
	@Test
	public void deleteKasko () {
		dao.deleteKasko(kasko.getInsKaskoId());
		
		Assert.assertNull(dao.searchKasko(kasko.getInsKaskoId()).getInsKaskoId());
	}
	
	@Test
	public void updateKasko () {
		dao.updateKasko(kasko);
		
		System.out.println(dao.searchKasko(kasko.getInsKaskoId()));
		Assert.assertEquals(kasko.getInsurerId(), dao.searchKasko(kasko.getInsurerId()).getInsurerId());
		Assert.assertEquals(kasko.getInsKaskoId(), dao.searchKasko(kasko.getInsKaskoId()).getInsKaskoId());
		Assert.assertEquals(kasko.getInsType(), dao.searchKasko("000014").getInsType());
		Assert.assertEquals(kasko.getInsurenceFirstName(), dao.searchKasko("000014").getInsurenceFirstName());
		Assert.assertEquals(kasko.getInsurenceSecondName(), dao.searchKasko("000014").getInsurenceSecondName());
		Assert.assertEquals(kasko.getInsurenceFamily(), dao.searchKasko("000014").getInsurenceFamily());
		Assert.assertEquals(kasko.getInsurenceEGN(), dao.searchKasko("000014").getInsurenceEGN());
		Assert.assertEquals(kasko.getInsurenceMobilePhone(), dao.searchKasko("000014").getInsurenceMobilePhone());
		Assert.assertEquals(kasko.getInsurenceAddress(), dao.searchKasko("000014").getInsurenceAddress());
		Assert.assertEquals(kasko.getInsurencePK(), dao.searchKasko("000014").getInsurencePK());
		Assert.assertEquals(kasko.getVehicleRegistrationNumber(), dao.searchKasko("000014").getVehicleRegistrationNumber());
		Assert.assertEquals(kasko.getVehicleType(), dao.searchKasko("000014").getVehicleType());
		Assert.assertEquals(kasko.getVehicleRama(), dao.searchKasko("000014").getVehicleRama());
		Assert.assertEquals(kasko.getVehicleBrand(), dao.searchKasko("000014").getVehicleBrand());
		Assert.assertEquals(kasko.getVehicleModel(), dao.searchKasko("000014").getVehicleModel());
		Assert.assertEquals(kasko.getVehicleColor(), dao.searchKasko("000014").getVehicleColor());
		Assert.assertEquals(kasko.getVehicleYear(), dao.searchKasko("000014").getVehicleYear());
		Assert.assertEquals(kasko.getVehicleFirstRegistration(), dao.searchKasko("000014").getVehicleFirstRegistration());
		Assert.assertEquals(kasko.getVehicleEngine(), dao.searchKasko("000014").getVehicleEngine(), 0.001);
		Assert.assertEquals(kasko.getVehiclePlaceNumber(), dao.searchKasko("000014").getVehiclePlaceNumber());
		Assert.assertEquals(kasko.getVehicleInsurenceValue(), dao.searchKasko("000014").getVehicleInsurenceValue(), 0.001);
		Assert.assertEquals(kasko.getVehicleInsurencePremiq(), dao.searchKasko("000014").getVehicleInsurencePremiq(), 0.001);
	}
	
	@Test
	public void searchKasko () {
		dao.insertKasko(kasko);
		
		Assert.assertEquals(kasko.getInsurerId(), dao.searchKasko("000014").getInsurerId());
		Assert.assertEquals(kasko.getInsKaskoId(), dao.searchKasko("000014").getInsKaskoId());
		Assert.assertEquals(kasko.getInsType(), dao.searchKasko("000014").getInsType());
		Assert.assertEquals(kasko.getInsurenceFirstName(), dao.searchKasko("000014").getInsurenceFirstName());
		Assert.assertEquals(kasko.getInsurenceSecondName(), dao.searchKasko("000014").getInsurenceSecondName());
		Assert.assertEquals(kasko.getInsurenceFamily(), dao.searchKasko("000014").getInsurenceFamily());
		Assert.assertEquals(kasko.getInsurenceEGN(), dao.searchKasko("000014").getInsurenceEGN());
		Assert.assertEquals(kasko.getInsurenceMobilePhone(), dao.searchKasko("000014").getInsurenceMobilePhone());
		Assert.assertEquals(kasko.getInsurenceAddress(), dao.searchKasko("000014").getInsurenceAddress());
		Assert.assertEquals(kasko.getInsurencePK(), dao.searchKasko("000014").getInsurencePK());
		Assert.assertEquals(kasko.getVehicleRegistrationNumber(), dao.searchKasko("000014").getVehicleRegistrationNumber());
		Assert.assertEquals(kasko.getVehicleType(), dao.searchKasko("000014").getVehicleType());
		Assert.assertEquals(kasko.getVehicleRama(), dao.searchKasko("000014").getVehicleRama());
		Assert.assertEquals(kasko.getVehicleBrand(), dao.searchKasko("000014").getVehicleBrand());
		Assert.assertEquals(kasko.getVehicleModel(), dao.searchKasko("000014").getVehicleModel());
		Assert.assertEquals(kasko.getVehicleColor(), dao.searchKasko("000014").getVehicleColor());
		Assert.assertEquals(kasko.getVehicleYear(), dao.searchKasko("000014").getVehicleYear());
		Assert.assertEquals(kasko.getVehicleFirstRegistration(), dao.searchKasko("000014").getVehicleFirstRegistration());
		Assert.assertEquals(kasko.getVehicleEngine(), dao.searchKasko("000014").getVehicleEngine(), 0.001);
		Assert.assertEquals(kasko.getVehiclePlaceNumber(), dao.searchKasko("000014").getVehiclePlaceNumber());
		Assert.assertEquals(kasko.getVehicleInsurenceValue(), dao.searchKasko("000014").getVehicleInsurenceValue(), 0.001);
		Assert.assertEquals(kasko.getVehicleInsurencePremiq(), dao.searchKasko("000014").getVehicleInsurencePremiq(), 0.001);
		
	}
	
	@Test
	public void searchKaskoByInsurer () {
		Assert.assertFalse(dao.searchKaskoByInsurer(kasko.getInsurerId()).isEmpty());
	}
}